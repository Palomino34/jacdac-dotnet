/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients {

    /// <summary>
    /// A 3-axis accelerometer.
    /// Implements a client for the Accelerometer service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/accelerometer/" />
    public partial class AccelerometerClient : SensorClient
    {
        public AccelerometerClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Accelerometer)
        {
        }

        /// <summary>
        /// Indicates the current forces acting on accelerometer., x: g,y: g,z: g
        /// </summary>
        public object[] /*(float, float, float)*/ Forces
        {
            get
            {
                return (object[] /*(float, float, float)*/)this.GetRegisterValues((ushort)AccelerometerReg.Forces, AccelerometerRegPack.Forces);
            }
        }

        /// <summary>
        /// (Optional) Error on the reading value., _: g
        /// </summary>
        public float ForcesError
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)AccelerometerReg.ForcesError, AccelerometerRegPack.ForcesError);
            }
        }

        /// <summary>
        /// (Optional) Configures the range forces detected.
        /// The value will be "rounded up" to one of `max_forces_supported`., _: g
        /// </summary>
        public float MaxForce
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)AccelerometerReg.MaxForce, AccelerometerRegPack.MaxForce);
            }
            set
            {
                
                this.SetRegisterValue((ushort)AccelerometerReg.MaxForce, AccelerometerRegPack.MaxForce, value);
            }

        }

        /// <summary>
        /// Emitted when accelerometer is tilted in the given direction.
        /// </summary>
        public event ClientEventHandler TiltUp
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.TiltUp, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.TiltUp, value);
            }
        }

        /// <summary>
        /// Emitted when accelerometer is tilted in the given direction.
        /// </summary>
        public event ClientEventHandler TiltDown
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.TiltDown, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.TiltDown, value);
            }
        }

        /// <summary>
        /// Emitted when accelerometer is tilted in the given direction.
        /// </summary>
        public event ClientEventHandler TiltLeft
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.TiltLeft, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.TiltLeft, value);
            }
        }

        /// <summary>
        /// Emitted when accelerometer is tilted in the given direction.
        /// </summary>
        public event ClientEventHandler TiltRight
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.TiltRight, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.TiltRight, value);
            }
        }

        /// <summary>
        /// Emitted when accelerometer is laying flat in the given direction.
        /// </summary>
        public event ClientEventHandler FaceUp
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.FaceUp, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.FaceUp, value);
            }
        }

        /// <summary>
        /// Emitted when accelerometer is laying flat in the given direction.
        /// </summary>
        public event ClientEventHandler FaceDown
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.FaceDown, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.FaceDown, value);
            }
        }

        /// <summary>
        /// Emitted when total force acting on accelerometer is much less than 1g.
        /// </summary>
        public event ClientEventHandler Freefall
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.Freefall, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.Freefall, value);
            }
        }

        /// <summary>
        /// Emitted when forces change violently a few times.
        /// </summary>
        public event ClientEventHandler Shake
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.Shake, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.Shake, value);
            }
        }

        /// <summary>
        /// Emitted when force in any direction exceeds given threshold.
        /// </summary>
        public event ClientEventHandler Force2g
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.Force2g, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.Force2g, value);
            }
        }

        /// <summary>
        /// Emitted when force in any direction exceeds given threshold.
        /// </summary>
        public event ClientEventHandler Force3g
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.Force3g, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.Force3g, value);
            }
        }

        /// <summary>
        /// Emitted when force in any direction exceeds given threshold.
        /// </summary>
        public event ClientEventHandler Force6g
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.Force6g, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.Force6g, value);
            }
        }

        /// <summary>
        /// Emitted when force in any direction exceeds given threshold.
        /// </summary>
        public event ClientEventHandler Force8g
        {
            add
            {
                this.AddEvent((ushort)AccelerometerEvent.Force8g, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AccelerometerEvent.Force8g, value);
            }
        }


    }
}