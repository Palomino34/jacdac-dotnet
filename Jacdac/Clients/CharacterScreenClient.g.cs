/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// A screen that displays characters, typically a LCD/OLED character screen.
    /// Implements a client for the Character Screen service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/characterscreen/" />
    public partial class CharacterScreenClient : Client
    {
        public CharacterScreenClient(JDBus bus, string name)
            : base(bus, (ushort)CharacterScreenConstants.ServiceClass, name)
        {
        }

        /// <summary>
        /// Text to show. Use `\n` to break lines., 
        /// </summary>
        public string Message
        {
            get
            {
                return (string)this.GetRegisterValue((ushort)CharacterScreenReg.Message, CharacterScreenRegPack.Message, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)CharacterScreenReg.Message, CharacterScreenRegPack.Message, 1, value);
            }

        }

        /// <summary>
        /// (Optional) Brightness of the screen. `0` means off., _: /
        /// </summary>
        public float Brightness
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)CharacterScreenReg.Brightness, CharacterScreenRegPack.Brightness, 100);
            }
            set
            {
                
                this.SetRegisterValue((ushort)CharacterScreenReg.Brightness, CharacterScreenRegPack.Brightness, 100, value);
            }

        }

        /// <summary>
        /// (Optional) Describes the type of character LED screen., 
        /// </summary>
        public CharacterScreenVariant Variant
        {
            get
            {
                return (CharacterScreenVariant)this.GetRegisterValue((ushort)CharacterScreenReg.Variant, CharacterScreenRegPack.Variant, 1);
            }
        }

        /// <summary>
        /// (Optional) Specifies the RTL or LTR direction of the text., 
        /// </summary>
        public CharacterScreenTextDirection TextDirection
        {
            get
            {
                return (CharacterScreenTextDirection)this.GetRegisterValue((ushort)CharacterScreenReg.TextDirection, CharacterScreenRegPack.TextDirection, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)CharacterScreenReg.TextDirection, CharacterScreenRegPack.TextDirection, 1, value);
            }

        }

        /// <summary>
        /// Gets the number of rows., _: #
        /// </summary>
        public uint Rows
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)CharacterScreenReg.Rows, CharacterScreenRegPack.Rows, 1);
            }
        }

        /// <summary>
        /// Gets the number of columns., _: #
        /// </summary>
        public uint Columns
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)CharacterScreenReg.Columns, CharacterScreenRegPack.Columns, 1);
            }
        }


    }
}