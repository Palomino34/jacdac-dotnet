/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// Measures equivalent CO₂ levels.
    /// Implements a client for the Equivalent CO₂ service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/eco2/" />
    public partial class ECO2Client : SensorClient
    {
        public ECO2Client(JDBus bus, string name)
            : base(bus, (ushort)ECO2Constants.ServiceClass, name)
        {
        }

        /// <summary>
        /// Equivalent CO₂ (eCO₂) readings., _: ppm
        /// </summary>
        public float ECO2
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ECO2Reg.ECO2, ECO2RegPack.ECO2, 1);
            }
        }

        /// <summary>
        /// (Optional) Error on the reading value., _: ppm
        /// </summary>
        public float ECO2Error
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ECO2Reg.ECO2Error, ECO2RegPack.ECO2Error, 1);
            }
        }

        /// <summary>
        /// Minimum measurable value, _: ppm
        /// </summary>
        public float MinECO2
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ECO2Reg.MinECO2, ECO2RegPack.MinECO2, 1);
            }
        }

        /// <summary>
        /// Minimum measurable value, _: ppm
        /// </summary>
        public float MaxECO2
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ECO2Reg.MaxECO2, ECO2RegPack.MaxECO2, 1);
            }
        }

        /// <summary>
        /// (Optional) Type of physical sensor and capabilities., 
        /// </summary>
        public ECO2Variant Variant
        {
            get
            {
                return (ECO2Variant)this.GetRegisterValue((ushort)ECO2Reg.Variant, ECO2RegPack.Variant, 1);
            }
        }


    }
}