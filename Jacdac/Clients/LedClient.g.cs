/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients {

    /// <summary>
    /// A controller for 1 or more monochrome or RGB LEDs connected in parallel.
    /// Implements a client for the LED service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/led/" />
    public partial class LedClient : Client
    {
        public LedClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Led)
        {
        }

        /// <summary>
        /// The current color of the LED., 
        /// </summary>
        public object[] /*(uint, uint, uint)*/ Color
        {
            get
            {
                return (object[] /*(uint, uint, uint)*/)this.GetRegisterValue((ushort)LedReg.Color, LedRegPack.Color);
            }
        }

        /// <summary>
        /// (Optional) Limit the power drawn by the light-strip (and controller)., _: mA
        /// </summary>
        public uint MaxPower
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)LedReg.MaxPower, LedRegPack.MaxPower);
            }
            set
            {
                
                this.SetRegisterValue((ushort)LedReg.MaxPower, LedRegPack.MaxPower, value);
            }

        }

        /// <summary>
        /// (Optional) If known, specifies the number of LEDs in parallel on this device., 
        /// </summary>
        public uint LedCount
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)LedReg.LedCount, LedRegPack.LedCount);
            }
        }

        /// <summary>
        /// (Optional) If monochrome LED, specifies the wave length of the LED., _: nm
        /// </summary>
        public uint WaveLength
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)LedReg.WaveLength, LedRegPack.WaveLength);
            }
        }

        /// <summary>
        /// (Optional) The luminous intensity of the LED, at full value, in micro candella., _: mcd
        /// </summary>
        public uint LuminousIntensity
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)LedReg.LuminousIntensity, LedRegPack.LuminousIntensity);
            }
        }

        /// <summary>
        /// (Optional) The physical type of LED., 
        /// </summary>
        public LedVariant Variant
        {
            get
            {
                return (LedVariant)this.GetRegisterValue((ushort)LedReg.Variant, LedRegPack.Variant);
            }
        }


        /// <summary>
        /// This has the same semantics as `set_status_light` in the control service.
        /// </summary>
        public void Animate(uint to_red, uint to_green, uint to_blue, uint speed)
        {
            this.SendCmdPacked((ushort)LedCmd.Animate, LedCmdPack.Animate, new object[] { to_red, to_green, to_blue, speed });
        }

    }
}