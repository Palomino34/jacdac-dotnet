/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients {

    /// <summary>
    /// A sensor, typically PIR, that detects object motion within a certain range
    /// Implements a client for the Motion service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/motion/" />
    public partial class MotionClient : SensorClient
    {
        public MotionClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Motion)
        {
        }

        /// <summary>
        /// Reads the <c>moving</c> register value.
        /// Reports is movement is currently detected by the sensor., 
        /// </summary>
        public bool Moving
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)MotionReg.Moving, MotionRegPack.Moving);
            }
        }

        /// <summary>
        /// Tries to read the <c>max_distance</c> register value.
        /// Maximum distance where objects can be detected., _: m
        /// </summary>
        bool TryGetMaxDistance(out float values)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)MotionReg.MaxDistance, MotionRegPack.MaxDistance, out value)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>angle</c> register value.
        /// Opening of the field of view, _: Â°
        /// </summary>
        bool TryGetAngle(out uint values)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)MotionReg.Angle, MotionRegPack.Angle, out value)) 
            {
                value = (uint)values[0];
                return true;
            }
            else
            {
                value = default(uint);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// Type of physical sensor, 
        /// </summary>
        bool TryGetVariant(out MotionVariant values)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)MotionReg.Variant, MotionRegPack.Variant, out value)) 
            {
                value = (MotionVariant)values[0];
                return true;
            }
            else
            {
                value = default(MotionVariant);
                return false;
            }
        }

        /// <summary>
        /// A movement was detected.
        /// </summary>
        public event ClientEventHandler Movement
        {
            add
            {
                this.AddEvent((ushort)MotionEvent.Movement, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MotionEvent.Movement, value);
            }
        }


    }
}