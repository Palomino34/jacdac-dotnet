/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// A DC motor.
    /// Implements a client for the Motor service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/motor/" />
    public partial class MotorClient : Client
    {
        public MotorClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Motor)
        {
        }

        /// <summary>
        /// PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.
        /// Positive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` 
        /// while ``enabled`` acts as brake., _: /
        /// </summary>
        public float Duty
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)MotorReg.Duty, MotorRegPack.Duty);
            }
            set
            {
                
                this.Enabled = true;
                this.SetRegisterValue((ushort)MotorReg.Duty, MotorRegPack.Duty, value);
            }

        }

        /// <summary>
        /// Turn the power to the motor on/off., 
        /// </summary>
        public bool Enabled
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)MotorReg.Enabled, MotorRegPack.Enabled);
            }
            set
            {
                
                this.SetRegisterValue((ushort)MotorReg.Enabled, MotorRegPack.Enabled, value);
            }

        }

        /// <summary>
        /// (Optional) Torque required to produce the rated power of an electrical motor at load speed., _: kg/cm
        /// </summary>
        public float LoadTorque
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)MotorReg.LoadTorque, MotorRegPack.LoadTorque);
            }
        }

        /// <summary>
        /// (Optional) Revolutions per minute of the motor under full load., _: rpm
        /// </summary>
        public float LoadSpeed
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)MotorReg.LoadSpeed, MotorRegPack.LoadSpeed);
            }
        }

        /// <summary>
        /// (Optional) Indicates if the motor can run backwards., 
        /// </summary>
        public bool Reversible
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)MotorReg.Reversible, MotorRegPack.Reversible);
            }
        }


    }
}