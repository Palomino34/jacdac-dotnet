/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// Real time clock to support collecting data with precise time stamps.
    /// Implements a client for the Real time clock service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/realtimeclock/" />
    public partial class RealTimeClockClient : SensorClient
    {
        public RealTimeClockClient(JDBus bus, string name)
            : base(bus, (ushort)RealTimeClockConstants.ServiceClass, name)
        {
        }

        /// <summary>
        /// Current time in 24h representation.
        /// 
        /// -   `day_of_month` is day of the month, starting at `1`
        /// -   `day_of_week` is day of the week, starting at `1` as monday. Default streaming period is 1 second., 
        /// </summary>
        public (uint, uint, uint, uint, uint, uint, uint) LocalTime
        {
            get
            {
                return ((uint, uint, uint, uint, uint, uint, uint))this.GetRegisterValue((ushort)RealTimeClockReg.LocalTime, RealTimeClockRegPack.LocalTime, 1);
            }
        }

        /// <summary>
        /// (Optional) Time drift since the last call to the `set_time` command., _: s
        /// </summary>
        public float Drift
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)RealTimeClockReg.Drift, RealTimeClockRegPack.Drift, 1);
            }
        }

        /// <summary>
        /// (Optional) Error on the clock, in parts per million of seconds., _: ppm
        /// </summary>
        public float Precision
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)RealTimeClockReg.Precision, RealTimeClockRegPack.Precision, 1);
            }
        }

        /// <summary>
        /// (Optional) The type of physical clock used by the sensor., 
        /// </summary>
        public RealTimeClockVariant Variant
        {
            get
            {
                return (RealTimeClockVariant)this.GetRegisterValue((ushort)RealTimeClockReg.Variant, RealTimeClockRegPack.Variant, 1);
            }
        }


        /// <summary>
        /// Sets the current time and resets the error.
        /// </summary>
        public void SetTime(uint year, uint month, uint day_of_month, uint day_of_week, uint hour, uint min, uint sec)
        {
            this.SendCmdPacked((ushort)RealTimeClockCmd.SetTime, RealTimeClockCmdPack.SetTime, new object[] { year, month, day_of_month, day_of_week, hour, min, sec });
        }

    }
}