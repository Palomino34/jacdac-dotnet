/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// Servo is a small motor with arm that can be pointing at a specific direction.
     /// 
     /// The `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.
    /// Implements a client for the Servo service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/servo/" />
    public partial class ServoClient : SensorClient
    {
        public ServoClient(JDBus bus, string name)
            : base(bus, ServiceClasses.Servo, name)
        {
        }

        /// <summary>
        /// Specifies the angle of the arm (request)., _: °
        /// </summary>
        public float Angle
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.Angle, ServoRegPack.Angle, 1);
            }
            set
            {
                
                this.Enabled = true;
                this.SetRegisterValue((ushort)ServoReg.Angle, ServoRegPack.Angle, 1, value);
            }

        }

        /// <summary>
        /// Turn the power to the servo on/off., 
        /// </summary>
        public bool Enabled
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)ServoReg.Enabled, ServoRegPack.Enabled, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)ServoReg.Enabled, ServoRegPack.Enabled, 1, value);
            }

        }

        /// <summary>
        /// Correction applied to the angle to account for the servo arm drift., _: °
        /// </summary>
        public float Offset
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.Offset, ServoRegPack.Offset, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)ServoReg.Offset, ServoRegPack.Offset, 1, value);
            }

        }

        /// <summary>
        /// Lowest angle that can be set., _: °
        /// </summary>
        public float MinAngle
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.MinAngle, ServoRegPack.MinAngle, 1);
            }
        }

        /// <summary>
        /// The length of pulse corresponding to lowest angle., _: us
        /// </summary>
        public uint MinPulse
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)ServoReg.MinPulse, ServoRegPack.MinPulse, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)ServoReg.MinPulse, ServoRegPack.MinPulse, 1, value);
            }

        }

        /// <summary>
        /// Highest angle that can be set., _: °
        /// </summary>
        public float MaxAngle
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.MaxAngle, ServoRegPack.MaxAngle, 1);
            }
        }

        /// <summary>
        /// The length of pulse corresponding to highest angle., _: us
        /// </summary>
        public uint MaxPulse
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)ServoReg.MaxPulse, ServoRegPack.MaxPulse, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)ServoReg.MaxPulse, ServoRegPack.MaxPulse, 1, value);
            }

        }

        /// <summary>
        /// (Optional) The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm., _: kg/cm
        /// </summary>
        public float StallTorque
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.StallTorque, ServoRegPack.StallTorque, 1);
            }
        }

        /// <summary>
        /// (Optional) Time to move 60°., _: s/60°
        /// </summary>
        public float ResponseSpeed
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.ResponseSpeed, ServoRegPack.ResponseSpeed, 1);
            }
        }

        /// <summary>
        /// (Optional) The current physical position of the arm., _: °
        /// </summary>
        public float CurrentAngle
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)ServoReg.CurrentAngle, ServoRegPack.CurrentAngle, 1);
            }
        }


    }
}