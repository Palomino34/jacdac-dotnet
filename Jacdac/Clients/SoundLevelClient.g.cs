/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// A sound level detector sensor, gives a relative indication of the sound level.
    /// Implements a client for the Sound level service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/soundlevel/" />
    public partial class SoundLevelClient : SensorClient
    {
        public SoundLevelClient(JDBus bus, string name)
            : base(bus, ServiceClasses.SoundLevel, name)
        {
        }

        /// <summary>
        /// The sound level detected by the microphone, _: /
        /// </summary>
        public float SoundLevel
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SoundLevelReg.SoundLevel, SoundLevelRegPack.SoundLevel, 100);
            }
        }

        /// <summary>
        /// Turn on or off the microphone., 
        /// </summary>
        public bool Enabled
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)SoundLevelReg.Enabled, SoundLevelRegPack.Enabled, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundLevelReg.Enabled, SoundLevelRegPack.Enabled, 1, value);
            }

        }

        /// <summary>
        /// The sound level to trigger a loud event., _: /
        /// </summary>
        public float LoudThreshold
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SoundLevelReg.LoudThreshold, SoundLevelRegPack.LoudThreshold, 100);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundLevelReg.LoudThreshold, SoundLevelRegPack.LoudThreshold, 100, value);
            }

        }

        /// <summary>
        /// The sound level to trigger a quiet event., _: /
        /// </summary>
        public float QuietThreshold
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SoundLevelReg.QuietThreshold, SoundLevelRegPack.QuietThreshold, 100);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundLevelReg.QuietThreshold, SoundLevelRegPack.QuietThreshold, 100, value);
            }

        }

        /// <summary>
        /// Raised when a loud sound is detected
        /// </summary>
        public event NodeEventHandler Loud;

        /// <summary>
        /// Raised when a period of quietness is detected
        /// </summary>
        public event NodeEventHandler Quiet;


    }
}