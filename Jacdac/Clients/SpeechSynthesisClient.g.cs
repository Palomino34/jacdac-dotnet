/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients {

    /// <summary>
    /// A speech synthesizer
    /// Implements a client for the Speech synthesis service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/speechsynthesis/" />
    public partial class SpeechSynthesisClient : Client
    {
        public SpeechSynthesisClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.SpeechSynthesis)
        {
        }

        /// <summary>
        /// Determines if the speech engine is in a non-paused state., 
        /// </summary>
        public bool Enabled
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)SpeechSynthesisReg.Enabled, SpeechSynthesisRegPack.Enabled);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SpeechSynthesisReg.Enabled, SpeechSynthesisRegPack.Enabled, value);
            }

        }

        /// <summary>
        /// (Optional) Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt., 
        /// </summary>
        public string Lang
        {
            get
            {
                return (string)this.GetRegisterValue((ushort)SpeechSynthesisReg.Lang, SpeechSynthesisRegPack.Lang);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SpeechSynthesisReg.Lang, SpeechSynthesisRegPack.Lang, value);
            }

        }

        /// <summary>
        /// (Optional) Volume for utterances., _: /
        /// </summary>
        public float Volume
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SpeechSynthesisReg.Volume, SpeechSynthesisRegPack.Volume);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SpeechSynthesisReg.Volume, SpeechSynthesisRegPack.Volume, value);
            }

        }

        /// <summary>
        /// (Optional) Pitch for utterances, 
        /// </summary>
        public float Pitch
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SpeechSynthesisReg.Pitch, SpeechSynthesisRegPack.Pitch);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SpeechSynthesisReg.Pitch, SpeechSynthesisRegPack.Pitch, value);
            }

        }

        /// <summary>
        /// (Optional) Rate for utterances, 
        /// </summary>
        public float Rate
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SpeechSynthesisReg.Rate, SpeechSynthesisRegPack.Rate);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SpeechSynthesisReg.Rate, SpeechSynthesisRegPack.Rate, value);
            }

        }


        
        /// <summary>
        /// Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.
        /// </summary>
        public void Speak(string text)
        {
            this.SendCmdPacked((ushort)SpeechSynthesisCmd.Speak, SpeechSynthesisCmdPack.Speak, new object[] { text });
        }

        
        /// <summary>
        /// Cancels current utterance and all utterances from the utterance queue.
        /// </summary>
        public void Cancel()
        {
            this.SendCmd((ushort)SpeechSynthesisCmd.Cancel);
        }

    }
}