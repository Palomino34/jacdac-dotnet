/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// A switch, which keeps its position.
    /// Implements a client for the Switch service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/switch/" />
    public partial class SwitchClient : SensorClient
    {
        public SwitchClient(JDBus bus, string name)
            : base(bus, (ushort)SwitchConstants.ServiceClass, name)
        {
        }

        /// <summary>
        /// Indicates whether the switch is currently active (on)., 
        /// </summary>
        public bool Active
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)SwitchReg.Active, SwitchRegPack.Active, 1);
            }
        }

        /// <summary>
        /// (Optional) Describes the type of switch used., 
        /// </summary>
        public SwitchVariant Variant
        {
            get
            {
                return (SwitchVariant)this.GetRegisterValue((ushort)SwitchReg.Variant, SwitchRegPack.Variant, 1);
            }
        }

        /// <summary>
        /// (Optional) Specifies the delay without activity to automatically turn off after turning on.
        /// For example, some light switches in staircases have such a capability., _: s
        /// </summary>
        public float AutoOffDelay
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SwitchReg.AutoOffDelay, SwitchRegPack.AutoOffDelay, 1);
            }
        }

        /// <summary>
        /// Emitted when switch goes from `off` to `on`.
        /// </summary>
        public event NodeEventHandler On;

        /// <summary>
        /// Emitted when switch goes from `on` to `off`.
        /// </summary>
        public event NodeEventHandler Off;


    }
}