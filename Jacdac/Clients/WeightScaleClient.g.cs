/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac {

    /// <summary>
    /// A weight measuring sensor.
    /// Implements a client for the Weight Scale service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/weightscale/" />
    public partial class WeightScaleClient : SensorClient
    {
        public WeightScaleClient(JDBus bus, string name)
            : base(bus, ServiceClasses.WeightScale, name)
        {
        }

        /// <summary>
        /// The reported weight., _: kg
        /// </summary>
        public float Weight
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.Weight, WeightScaleRegPack.Weight, 1);
            }
        }

        /// <summary>
        /// (Optional) The estimate error on the reported reading., _: kg
        /// </summary>
        public float WeightError
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.WeightError, WeightScaleRegPack.WeightError, 1);
            }
        }

        /// <summary>
        /// (Optional) Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.
        /// You do not need to subtract that from the reading, it has already been done., _: kg
        /// </summary>
        public float ZeroOffset
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.ZeroOffset, WeightScaleRegPack.ZeroOffset, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)WeightScaleReg.ZeroOffset, WeightScaleRegPack.ZeroOffset, 1, value);
            }

        }

        /// <summary>
        /// (Optional) Calibrated gain on the weight scale error., 
        /// </summary>
        public float Gain
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.Gain, WeightScaleRegPack.Gain, 1);
            }
            set
            {
                
                this.SetRegisterValue((ushort)WeightScaleReg.Gain, WeightScaleRegPack.Gain, 1, value);
            }

        }

        /// <summary>
        /// (Optional) Maximum supported weight on the scale., _: kg
        /// </summary>
        public float MaxWeight
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.MaxWeight, WeightScaleRegPack.MaxWeight, 1);
            }
        }

        /// <summary>
        /// (Optional) Minimum recommend weight on the scale., _: kg
        /// </summary>
        public float MinWeight
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.MinWeight, WeightScaleRegPack.MinWeight, 1);
            }
        }

        /// <summary>
        /// (Optional) Smallest, yet distinguishable change in reading., _: kg
        /// </summary>
        public float WeightResolution
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.WeightResolution, WeightScaleRegPack.WeightResolution, 1);
            }
        }

        /// <summary>
        /// (Optional) The type of physical scale, 
        /// </summary>
        public WeightScaleVariant Variant
        {
            get
            {
                return (WeightScaleVariant)this.GetRegisterValue((ushort)WeightScaleReg.Variant, WeightScaleRegPack.Variant, 1);
            }
        }


        /// <summary>
        /// Call this command when there is nothing on the scale. If supported, the module should save the calibration data.
        /// </summary>
        public void CalibrateZeroOffset()
        {
            this.SendCmdPacked((ushort)WeightScaleCmd.CalibrateZeroOffset, WeightScaleCmdPack.CalibrateZeroOffset, new object[] {  });
        }

        /// <summary>
        /// Call this command with the weight of the thing on the scale.
        /// </summary>
        public void CalibrateGain(float weight)
        {
            this.SendCmdPacked((ushort)WeightScaleCmd.CalibrateGain, WeightScaleCmdPack.CalibrateGain, new object[] { weight });
        }

    }
}